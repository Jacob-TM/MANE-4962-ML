{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"14o9ZfN_KwGFkpKiaUJOuEvvj0wDwyfZ8","timestamp":1744652222641}],"authorship_tag":"ABX9TyMQF977G61IqZjvhzMT4cp4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"pfVVWiNdGBHQ","executionInfo":{"status":"ok","timestamp":1744927813509,"user_tz":240,"elapsed":20938,"user":{"displayName":"JakeTheDrake","userId":"01107552549446951353"}}},"outputs":[],"source":["from google.colab import drive, sheets\n","import json\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import matplotlib.dates as mdates\n","from tensorflow.keras.callbacks import EarlyStopping\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.layers import Input, LSTM, Embedding, Dense, concatenate, TimeDistributed\n","from tensorflow.keras.models import Model, load_model\n","from tensorflow.keras.preprocessing.sequence import pad_sequences, TimeseriesGenerator\n","from sklearn.preprocessing import RobustScaler\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","import os"]},{"cell_type":"code","source":["drive.mount('/content/drive', force_remount=True)\n","file_path = '/content/drive/MyDrive/ML/final_project/data/processed/df_merged.csv'\n","data = pd.read_csv(file_path)\n","\n","# Convert 'date' column to datetime and sort by ticker and date (chronological order)\n","data['date'] = pd.to_datetime(data['date'])\n","data.sort_values(['ticker', 'date'], inplace=True)\n","data.reset_index(drop=True, inplace=True)\n","\n","# Get unique tickers (e.g., NVDA, PG, VOO)\n","tickers = data['ticker'].unique()\n","\n","# Dictionaries to store processing objects and data splits per ticker\n","tokenizers = {}\n","max_seq_len = {}\n","scalers = {}\n","train_sequences = {}\n","test_sequences = {}\n","\n","# Define window size and numeric feature names\n","window_size = 30  # using 30 days as the sequence length\n","numeric_features = ['close', 'volume', 'open', 'high', 'low']\n","\n","for ticker in tickers:\n","    # Filter data for the current ticker\n","    df_ticker = data[data['ticker'] == ticker].reset_index(drop=True)\n","\n","    # 80/20 chronological split (first 80% for training, later 20% for testing)\n","    split_index = int(len(df_ticker) * 0.8)\n","    train_df = df_ticker.iloc[:split_index].reset_index(drop=True)\n","    test_df = df_ticker.iloc[split_index:].reset_index(drop=True)\n","\n","    # Ensure headlines (title) are strings and fill any missing values\n","    train_df['title'] = train_df['title'].fillna('').astype(str)\n","    test_df['title'] = test_df['title'].fillna('').astype(str)\n","\n","    # Tokenize headlines using Keras Tokenizer (fit on training data only)\n","    tokenizer = Tokenizer()\n","    tokenizer.fit_on_texts(train_df['title'])\n","    tokenizers[ticker] = tokenizer\n","\n","    # Convert titles to sequences and then pad them\n","    train_title_seq = tokenizer.texts_to_sequences(train_df['title'])\n","    test_title_seq = tokenizer.texts_to_sequences(test_df['title'])\n","\n","    # Determine the maximum sequence length for this ticker\n","    max_len = max(max(len(seq) for seq in train_title_seq), max(len(seq) for seq in test_title_seq))\n","    max_seq_len[ticker] = max_len\n","\n","    X_train_title_pad = pad_sequences(train_title_seq, maxlen=max_len, padding='post')\n","    X_test_title_pad = pad_sequences(test_title_seq, maxlen=max_len, padding='post')\n","\n","    # Scale numeric features with Robust Scaler (fit only on training data to avoid leakage)\n","    scaler = RobustScaler()\n","    scaler.fit(train_df[numeric_features])\n","    scalers[ticker] = scaler\n","\n","    train_num_scaled = scaler.transform(train_df[numeric_features])\n","    test_num_scaled = scaler.transform(test_df[numeric_features])\n","\n","    # Build sliding-window sequences for the training data\n","    X_num_train, X_text_train, y_train = [], [], []\n","    for i in range(len(train_num_scaled) - window_size):\n","        X_num_train.append(train_num_scaled[i : i + window_size])\n","        X_text_train.append(X_train_title_pad[i : i + window_size])\n","        # The target is the next day’s 'close' price (first feature)\n","        y_train.append(train_num_scaled[i + window_size][0])\n","    X_num_train = np.array(X_num_train)\n","    X_text_train = np.array(X_text_train)\n","    y_train = np.array(y_train)\n","\n","    # Build sliding-window sequences for the testing data\n","    X_num_test, X_text_test, y_test = [], [], []\n","    for i in range(len(test_num_scaled) - window_size):\n","        X_num_test.append(test_num_scaled[i : i + window_size])\n","        X_text_test.append(X_test_title_pad[i : i + window_size])\n","        y_test.append(test_num_scaled[i + window_size][0])\n","    X_num_test = np.array(X_num_test)\n","    X_text_test = np.array(X_text_test)\n","    y_test = np.array(y_test)\n","\n","    train_sequences[ticker] = (X_num_train, X_text_train, y_train)\n","    test_sequences[ticker] = (X_num_test, X_text_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3tYskq16exbm","executionInfo":{"status":"ok","timestamp":1744927839472,"user_tz":240,"elapsed":23069,"user":{"displayName":"JakeTheDrake","userId":"01107552549446951353"}},"outputId":"232e5af5-0fb0-4237-f486-f74b488c71f4"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["def build_model(ticker):\n","    \"\"\"\n","    Build the multi-input LSTM model for a given ticker.\n","    One branch processes the numeric features, and the other processes tokenized headlines.\n","    \"\"\"\n","    seq_length = max_seq_len[ticker]        # maximum headline length for current ticker\n","    vocab_size = len(tokenizers[ticker].word_index) + 1  # vocabulary size (+1 for reserved index)\n","    n_num_features = len(numeric_features)  # number of numeric features\n","\n","    # Numeric input branch\n","    numeric_input = Input(shape=(window_size, n_num_features), name=f\"{ticker}_numeric_input\")\n","    numeric_lstm = LSTM(64, activation='relu')(numeric_input)\n","\n","    # Text input branch\n","    text_input = Input(shape=(window_size, seq_length), name=f\"{ticker}_text_input\")\n","    # Embed and process each day's headline with an LSTM (applied day-wise using TimeDistributed)\n","    embedded_text = TimeDistributed(Embedding(input_dim=vocab_size, output_dim=50, input_length=seq_length))(text_input)\n","    per_day_text_vec = TimeDistributed(LSTM(32, activation='relu'))(embedded_text)\n","    text_lstm = LSTM(32, activation='relu')(per_day_text_vec)\n","\n","    # Combine both branches and produce the final prediction\n","    combined = concatenate([numeric_lstm, text_lstm])\n","    dense1 = Dense(32, activation='relu')(combined)\n","    output = Dense(1, activation='linear')(dense1)\n","\n","    model = Model(inputs=[numeric_input, text_input], outputs=output)\n","    model.compile(loss='mse', optimizer='adam', metrics=['mae'])\n","    return model\n","\n","# Build a dictionary of models (one per ticker)\n","models = {}\n","for ticker in tickers:\n","    models[ticker] = build_model(ticker)\n","    print(f\"\\n{ticker} model summary:\")\n","    models[ticker].summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"afsebp3YhtAX","executionInfo":{"status":"ok","timestamp":1744661380207,"user_tz":240,"elapsed":329,"user":{"displayName":"JakeTheDrake","userId":"01107552549446951353"}},"outputId":"27a660cb-cabf-40b6-f679-334339f4abfb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","NVDA model summary:\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"functional_21\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_21\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ NVDA_text_input     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m480\u001b[0m)   │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ time_distributed_42 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m480\u001b[0m,   │    \u001b[38;5;34m377,400\u001b[0m │ NVDA_text_input[\u001b[38;5;34m…\u001b[0m │\n","│ (\u001b[38;5;33mTimeDistributed\u001b[0m)   │ \u001b[38;5;34m50\u001b[0m)               │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ NVDA_numeric_input  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m5\u001b[0m)     │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ time_distributed_43 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m32\u001b[0m)    │     \u001b[38;5;34m10,624\u001b[0m │ time_distributed… │\n","│ (\u001b[38;5;33mTimeDistributed\u001b[0m)   │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lstm_63 (\u001b[38;5;33mLSTM\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │     \u001b[38;5;34m17,920\u001b[0m │ NVDA_numeric_inp… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lstm_65 (\u001b[38;5;33mLSTM\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │      \u001b[38;5;34m8,320\u001b[0m │ time_distributed… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ concatenate_21      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m96\u001b[0m)        │          \u001b[38;5;34m0\u001b[0m │ lstm_63[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],    │\n","│ (\u001b[38;5;33mConcatenate\u001b[0m)       │                   │            │ lstm_65[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_42 (\u001b[38;5;33mDense\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │      \u001b[38;5;34m3,104\u001b[0m │ concatenate_21[\u001b[38;5;34m0\u001b[0m… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_43 (\u001b[38;5;33mDense\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)         │         \u001b[38;5;34m33\u001b[0m │ dense_42[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ NVDA_text_input     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">480</span>)   │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ time_distributed_42 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">480</span>,   │    <span style=\"color: #00af00; text-decoration-color: #00af00\">377,400</span> │ NVDA_text_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>)   │ <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)               │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ NVDA_numeric_input  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ time_distributed_43 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">10,624</span> │ time_distributed… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>)   │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lstm_63 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │     <span style=\"color: #00af00; text-decoration-color: #00af00\">17,920</span> │ NVDA_numeric_inp… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lstm_65 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │      <span style=\"color: #00af00; text-decoration-color: #00af00\">8,320</span> │ time_distributed… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ concatenate_21      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">96</span>)        │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ lstm_63[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],    │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Concatenate</span>)       │                   │            │ lstm_65[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_42 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │      <span style=\"color: #00af00; text-decoration-color: #00af00\">3,104</span> │ concatenate_21[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_43 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)         │         <span style=\"color: #00af00; text-decoration-color: #00af00\">33</span> │ dense_42[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m417,401\u001b[0m (1.59 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">417,401</span> (1.59 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m417,401\u001b[0m (1.59 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">417,401</span> (1.59 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","PG model summary:\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"functional_22\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_22\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ PG_text_input       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m46\u001b[0m)    │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ time_distributed_44 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m46\u001b[0m,    │     \u001b[38;5;34m87,300\u001b[0m │ PG_text_input[\u001b[38;5;34m0\u001b[0m]… │\n","│ (\u001b[38;5;33mTimeDistributed\u001b[0m)   │ \u001b[38;5;34m50\u001b[0m)               │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ PG_numeric_input    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m5\u001b[0m)     │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ time_distributed_45 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m32\u001b[0m)    │     \u001b[38;5;34m10,624\u001b[0m │ time_distributed… │\n","│ (\u001b[38;5;33mTimeDistributed\u001b[0m)   │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lstm_66 (\u001b[38;5;33mLSTM\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │     \u001b[38;5;34m17,920\u001b[0m │ PG_numeric_input… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lstm_68 (\u001b[38;5;33mLSTM\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │      \u001b[38;5;34m8,320\u001b[0m │ time_distributed… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ concatenate_22      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m96\u001b[0m)        │          \u001b[38;5;34m0\u001b[0m │ lstm_66[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],    │\n","│ (\u001b[38;5;33mConcatenate\u001b[0m)       │                   │            │ lstm_68[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_44 (\u001b[38;5;33mDense\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │      \u001b[38;5;34m3,104\u001b[0m │ concatenate_22[\u001b[38;5;34m0\u001b[0m… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_45 (\u001b[38;5;33mDense\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)         │         \u001b[38;5;34m33\u001b[0m │ dense_44[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ PG_text_input       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">46</span>)    │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ time_distributed_44 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">46</span>,    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">87,300</span> │ PG_text_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>)   │ <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)               │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ PG_numeric_input    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ time_distributed_45 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">10,624</span> │ time_distributed… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>)   │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lstm_66 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │     <span style=\"color: #00af00; text-decoration-color: #00af00\">17,920</span> │ PG_numeric_input… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lstm_68 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │      <span style=\"color: #00af00; text-decoration-color: #00af00\">8,320</span> │ time_distributed… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ concatenate_22      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">96</span>)        │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ lstm_66[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],    │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Concatenate</span>)       │                   │            │ lstm_68[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_44 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │      <span style=\"color: #00af00; text-decoration-color: #00af00\">3,104</span> │ concatenate_22[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_45 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)         │         <span style=\"color: #00af00; text-decoration-color: #00af00\">33</span> │ dense_44[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m127,301\u001b[0m (497.27 KB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">127,301</span> (497.27 KB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m127,301\u001b[0m (497.27 KB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">127,301</span> (497.27 KB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","VOO model summary:\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"functional_23\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_23\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ VOO_text_input      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m19\u001b[0m)    │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ time_distributed_46 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m19\u001b[0m,    │     \u001b[38;5;34m11,200\u001b[0m │ VOO_text_input[\u001b[38;5;34m0\u001b[0m… │\n","│ (\u001b[38;5;33mTimeDistributed\u001b[0m)   │ \u001b[38;5;34m50\u001b[0m)               │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ VOO_numeric_input   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m5\u001b[0m)     │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ time_distributed_47 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m32\u001b[0m)    │     \u001b[38;5;34m10,624\u001b[0m │ time_distributed… │\n","│ (\u001b[38;5;33mTimeDistributed\u001b[0m)   │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lstm_69 (\u001b[38;5;33mLSTM\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │     \u001b[38;5;34m17,920\u001b[0m │ VOO_numeric_inpu… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lstm_71 (\u001b[38;5;33mLSTM\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │      \u001b[38;5;34m8,320\u001b[0m │ time_distributed… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ concatenate_23      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m96\u001b[0m)        │          \u001b[38;5;34m0\u001b[0m │ lstm_69[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],    │\n","│ (\u001b[38;5;33mConcatenate\u001b[0m)       │                   │            │ lstm_71[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_46 (\u001b[38;5;33mDense\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │      \u001b[38;5;34m3,104\u001b[0m │ concatenate_23[\u001b[38;5;34m0\u001b[0m… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_47 (\u001b[38;5;33mDense\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)         │         \u001b[38;5;34m33\u001b[0m │ dense_46[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ VOO_text_input      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">19</span>)    │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ time_distributed_46 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">19</span>,    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">11,200</span> │ VOO_text_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>)   │ <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)               │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ VOO_numeric_input   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ time_distributed_47 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">10,624</span> │ time_distributed… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>)   │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lstm_69 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │     <span style=\"color: #00af00; text-decoration-color: #00af00\">17,920</span> │ VOO_numeric_inpu… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lstm_71 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │      <span style=\"color: #00af00; text-decoration-color: #00af00\">8,320</span> │ time_distributed… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ concatenate_23      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">96</span>)        │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ lstm_69[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],    │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Concatenate</span>)       │                   │            │ lstm_71[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_46 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │      <span style=\"color: #00af00; text-decoration-color: #00af00\">3,104</span> │ concatenate_23[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_47 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)         │         <span style=\"color: #00af00; text-decoration-color: #00af00\">33</span> │ dense_46[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m51,201\u001b[0m (200.00 KB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">51,201</span> (200.00 KB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m51,201\u001b[0m (200.00 KB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">51,201</span> (200.00 KB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}}]},{"cell_type":"code","source":["# Mount the drive and define the model saving directory\n","drive.mount('/content/drive', force_remount=True)\n","save_dir = \"/content/drive/MyDrive/ML/final_project/results/models_v2\"\n","os.makedirs(save_dir, exist_ok=True)\n","\n","# Define the path for the loss history JSON file\n","history_filepath = os.path.join(save_dir, \"loss_histories.json\")\n","\n","# If the JSON file exists, load its content; otherwise, start with an empty dictionary\n","if os.path.exists(history_filepath):\n","    with open(history_filepath, \"r\") as f:\n","        loss_histories = json.load(f)\n","    print(f\"Loaded existing loss histories from {history_filepath}\")\n","else:\n","    loss_histories = {}\n","\n","# Loop over the tickers and train or load models accordingly.\n","for ticker in tickers:\n","    model_filepath = os.path.join(save_dir, f\"{ticker}_model.keras\")\n","\n","    # Check if model file already exists\n","    if os.path.exists(model_filepath):\n","        print(f\"\\nModel for {ticker} already exists at {model_filepath}. Loading model and skipping training.\")\n","        models[ticker] = load_model(model_filepath)\n","        # Even if we skip training, ensure that the ticker is present in loss_histories (or leave it as is)\n","        if ticker not in loss_histories:\n","            loss_histories[ticker] = {}  # You might want to leave it empty or indicate \"not trained\"\n","        continue  # Skip training for this ticker\n","\n","    print(f\"\\n--- Training model for {ticker} ---\")\n","    X_num_train, X_text_train, y_train = train_sequences[ticker]\n","    X_num_test, X_text_test, y_test = test_sequences[ticker]\n","    model = models[ticker]\n","\n","    # Train the model\n","    history = model.fit(\n","        [X_num_train, X_text_train], y_train,\n","        validation_data=([X_num_test, X_text_test], y_test),\n","        epochs=2,\n","        batch_size=32,\n","        verbose=1\n","    )\n","\n","    # Update the loss_histories dictionary for this ticker with the new history\n","    loss_histories[ticker] = history.history\n","\n","    # Save the model in native Keras format\n","    model.save(model_filepath)\n","    print(f\"Saved model for {ticker} to {model_filepath}\")\n","\n","# After processing all tickers, write the updated loss_histories back to the JSON file\n","with open(history_filepath, \"w\") as f:\n","    json.dump(loss_histories, f)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IPQRRFAYjzqK","executionInfo":{"status":"ok","timestamp":1744661383033,"user_tz":240,"elapsed":2819,"user":{"displayName":"JakeTheDrake","userId":"01107552549446951353"}},"outputId":"6f0b9fcd-7f9f-4dd8-c911-4f1b3128446e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","Loaded existing loss histories from /content/drive/MyDrive/ML/final_project/results/models_v2/loss_histories.json\n","\n","Model for NVDA already exists at /content/drive/MyDrive/ML/final_project/results/models_v2/NVDA_model.keras. Loading model and skipping training.\n","\n","Model for PG already exists at /content/drive/MyDrive/ML/final_project/results/models_v2/PG_model.keras. Loading model and skipping training.\n","\n","Model for VOO already exists at /content/drive/MyDrive/ML/final_project/results/models_v2/VOO_model.keras. Loading model and skipping training.\n"]}]},{"cell_type":"code","source":["drive.mount('/content/drive', force_remount=True)\n","history_filepath = \"/content/drive/MyDrive/ML/final_project/results/models_v2/loss_histories.json\"\n","with open(history_filepath, \"r\") as f:\n","    loss_histories = json.load(f)\n","\n","# Assume that tickers is a list like: [\"NVDA\", \"PG\", \"VOO\"]\n","for ticker in tickers:\n","    ticker_history = loss_histories.get(ticker, None)\n","    if ticker_history is None:\n","        print(f\"No history found for {ticker}\")\n","        continue\n","\n","    plt.figure(figsize=(8, 4))\n","    plt.plot(ticker_history[\"loss\"], label=\"Training Loss\")\n","    plt.plot(ticker_history[\"val_loss\"], label=\"Validation Loss\")\n","    plt.title(f\"Loss History for {ticker}\")\n","    plt.xlabel(\"Epoch\")\n","    plt.ylabel(\"Loss\")\n","    plt.legend()\n","    plt.grid(True)\n","    plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"idDCteAVIto6","executionInfo":{"status":"ok","timestamp":1744661386248,"user_tz":240,"elapsed":3208,"user":{"displayName":"JakeTheDrake","userId":"01107552549446951353"}},"outputId":"cb0c45aa-9882-4867-cdb9-5a0fc306808b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["for ticker in tickers:\n","    print(f\"\\n--- Evaluating model for {ticker} ---\")\n","    # Using the model in-memory; ensure models[ticker] is loaded\n","    model = models[ticker]\n","    X_num_test, X_text_test, y_test = test_sequences[ticker]\n","\n","    # Predict on the test data\n","    y_pred_scaled = model.predict([X_num_test, X_text_test]).flatten()\n","\n","    # Invert scaling using RobustScaler attributes:\n","    # RobustScaler transforms data as: X_scaled = (X - median) / IQR;\n","    # Inversion is then: X = X_scaled * IQR + median\n","    scaler = scalers[ticker]\n","    close_idx = 0  # assume the 'close' price is the first numerical feature\n","    center = scaler.center_[close_idx]  # median for 'close'\n","    scale = scaler.scale_[close_idx]      # IQR for 'close'\n","\n","    y_pred = y_pred_scaled * scale + center\n","    y_true = y_test * scale + center\n","\n","    rmse = np.sqrt(mean_squared_error(y_true, y_pred))\n","    mae = mean_absolute_error(y_true, y_pred)\n","\n","    print(f\"{ticker} - Test RMSE: {rmse:.4f}, MAE: {mae:.4f}\")"],"metadata":{"id":"5x0JUBwtk58G","executionInfo":{"status":"error","timestamp":1744927863326,"user_tz":240,"elapsed":243,"user":{"displayName":"JakeTheDrake","userId":"01107552549446951353"}},"colab":{"base_uri":"https://localhost:8080/","height":245},"outputId":"6a492d39-2cdd-4dce-f222-ff3731dbd5d6"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","--- Evaluating model for NVDA ---\n"]},{"output_type":"error","ename":"NameError","evalue":"name 'models' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-43194594cce4>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"\\n--- Evaluating model for {ticker} ---\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0;31m# Using the model in-memory; ensure models[ticker] is loaded\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mticker\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m     \u001b[0mX_num_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_text_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_sequences\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mticker\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'models' is not defined"]}]},{"cell_type":"code","source":["simulated_results = {}\n","\n","for ticker in tickers:\n","    # Retrieve test data and model/scaler objects for this ticker\n","    X_num_test, X_text_test, y_test = test_sequences[ticker]\n","    model = models[ticker]\n","    scaler = scalers[ticker]\n","    close_idx = 0  # assume the \"close\" price is the first numeric feature\n","\n","    # Predict on test data and invert the scaling\n","    y_pred_scaled = model.predict([X_num_test, X_text_test]).flatten()\n","    center = scaler.center_[close_idx]\n","    scale = scaler.scale_[close_idx]\n","    y_pred = y_pred_scaled * scale + center\n","    y_true = y_test * scale + center\n","\n","    # Compute daily returns for AI strategy and baseline:\n","    # - AI strategy: Invest only if prediction > previous day's close.\n","    # - Baseline (\"buy and hold\"): Always invested.\n","    daily_returns = []\n","    baseline_returns = []\n","\n","    for i in range(len(y_pred)):\n","        # Retrieve the previous day's close from the sliding window;\n","        # last day in the window gives the previous closing price.\n","        prev_close_scaled = X_num_test[i][-1, close_idx]\n","        prev_close = prev_close_scaled * scale + center\n","\n","        # AI Strategy: invest if the predicted next-day close > prev_close.\n","        if y_pred[i] > prev_close:\n","            daily_ret = y_true[i] / prev_close  # gain/loss factor\n","        else:\n","            daily_ret = 1.0  # no investment: portfolio stays unchanged (cash)\n","        daily_returns.append(daily_ret)\n","\n","        # Baseline strategy: always invested; use market return.\n","        baseline_ret = y_true[i] / prev_close\n","        baseline_returns.append(baseline_ret)\n","\n","    daily_returns = np.array(daily_returns)\n","    cumulative_return = np.cumprod(daily_returns)\n","    baseline_returns = np.array(baseline_returns)\n","    baseline_cumulative_return = np.cumprod(baseline_returns)\n","\n","    simulated_results[ticker] = {\n","        \"daily_returns\": daily_returns.tolist(),\n","        \"cumulative_returns\": cumulative_return.tolist(),\n","        \"baseline_daily_returns\": baseline_returns.tolist(),\n","        \"baseline_cumulative_returns\": baseline_cumulative_return.tolist()\n","    }\n","\n","    # Retrieve the list of dates for this ticker's test predictions.\n","    # test_dates_dict should have been built (e.g., using your merged dataframe).\n","    dates = test_dates_dict.get(ticker, list(range(len(cumulative_return))))\n","\n","    # Plot both cumulative returns on the same scale for easy comparison.\n","    plt.figure(figsize=(12, 6))\n","    plt.plot(dates, cumulative_return, label='AI Strategy', color='blue', linewidth=2)\n","    plt.plot(dates, baseline_cumulative_return, label='Baseline: Buy & Hold', color='green', linestyle='--', linewidth=2)\n","    plt.title(f\"Cumulative Return Simulation for {ticker}\\n(AI Strategy vs. Baseline)\")\n","    plt.xlabel(\"Date\")\n","    plt.ylabel(\"Cumulative Return (Normalized)\")\n","    plt.legend()\n","    plt.grid(True)\n","\n","    # Format x-axis dates\n","    plt.gcf().autofmt_xdate()\n","    date_formatter = mdates.DateFormatter('%Y-%m-%d')\n","    plt.gca().xaxis.set_major_formatter(date_formatter)\n","\n","    plt.show()\n","\n","    print(f\"{ticker}: Final Cumulative Return (AI Strategy) = {cumulative_return[-1]:.2f}\")\n","    print(f\"{ticker}: Final Cumulative Return (Baseline) = {baseline_cumulative_return[-1]:.2f}\")"],"metadata":{"id":"YHgvdaDwFoMt","executionInfo":{"status":"error","timestamp":1744927865878,"user_tz":240,"elapsed":26,"user":{"displayName":"JakeTheDrake","userId":"01107552549446951353"}},"colab":{"base_uri":"https://localhost:8080/","height":211},"outputId":"f651588f-95d5-4633-de17-81dc241f0264"},"execution_count":5,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'models' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-b95216eeb662>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;31m# Retrieve test data and model/scaler objects for this ticker\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mX_num_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_text_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_sequences\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mticker\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mticker\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0mscaler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscalers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mticker\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mclose_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m  \u001b[0;31m# assume the \"close\" price is the first numeric feature\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'models' is not defined"]}]}]}