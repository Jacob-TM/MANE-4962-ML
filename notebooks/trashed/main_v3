{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20475,"status":"ok","timestamp":1744822492668,"user":{"displayName":"JakeTheDrake","userId":"01107552549446951353"},"user_tz":240},"id":"ilsDHSydQSbs","outputId":"cacd621d-1996-4339-9b03-5cb63f5b14f9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: scikeras in /usr/local/lib/python3.11/dist-packages (0.13.0)\n","Requirement already satisfied: keras>=3.2.0 in /usr/local/lib/python3.11/dist-packages (from scikeras) (3.8.0)\n","Requirement already satisfied: scikit-learn>=1.4.2 in /usr/local/lib/python3.11/dist-packages (from scikeras) (1.4.2)\n","Requirement already satisfied: absl-py in /usr/local/lib/python3.11/dist-packages (from keras>=3.2.0->scikeras) (1.4.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from keras>=3.2.0->scikeras) (2.0.2)\n","Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras>=3.2.0->scikeras) (13.9.4)\n","Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.2.0->scikeras) (0.0.8)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.11/dist-packages (from keras>=3.2.0->scikeras) (3.13.0)\n","Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.2.0->scikeras) (0.15.0)\n","Requirement already satisfied: ml-dtypes in /usr/local/lib/python3.11/dist-packages (from keras>=3.2.0->scikeras) (0.4.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from keras>=3.2.0->scikeras) (24.2)\n","Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.4.2->scikeras) (1.14.1)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.4.2->scikeras) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.4.2->scikeras) (3.6.0)\n","Requirement already satisfied: typing-extensions>=4.5.0 in /usr/local/lib/python3.11/dist-packages (from optree->keras>=3.2.0->scikeras) (4.13.1)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.2.0->scikeras) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.2.0->scikeras) (2.18.0)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.2.0->scikeras) (0.1.2)\n","Found existing installation: scikit-learn 1.4.2\n","Uninstalling scikit-learn-1.4.2:\n","  Successfully uninstalled scikit-learn-1.4.2\n","Collecting scikit-learn==1.4.2\n","  Using cached scikit_learn-1.4.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\n","Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.11/dist-packages (from scikit-learn==1.4.2) (2.0.2)\n","Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn==1.4.2) (1.14.1)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn==1.4.2) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn==1.4.2) (3.6.0)\n","Using cached scikit_learn-1.4.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.1 MB)\n","Installing collected packages: scikit-learn\n","Successfully installed scikit-learn-1.4.2\n"]}],"source":["!pip install scikeras\n","!pip uninstall -y scikit-learn\n","!pip install scikit-learn==1.4.2"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":38,"status":"ok","timestamp":1744824662131,"user":{"displayName":"JakeTheDrake","userId":"01107552549446951353"},"user_tz":240},"id":"qzIrnaSwhGf6"},"outputs":[],"source":["from google.colab import drive\n","import json\n","import pandas as pd\n","import numpy as np\n","import os\n","import tensorflow as tf\n","from tensorflow.keras.layers import Input, LSTM, Embedding, Dense, concatenate, TimeDistributed, Lambda\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.callbacks import EarlyStopping\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.model_selection import RandomizedSearchCV\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","from scikeras.wrappers import KerasRegressor"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GbsjCINSQPgq","colab":{"base_uri":"https://localhost:8080/"},"outputId":"656b9360-5a39-458f-f41c-8cf1b1dcefcd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/_array_api.py:472: RuntimeWarning: All-NaN slice encountered\n","  return xp.asarray(numpy.nanmin(X, axis=axis))\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/_array_api.py:489: RuntimeWarning: All-NaN slice encountered\n","  return xp.asarray(numpy.nanmax(X, axis=axis))\n"]},{"output_type":"stream","name":"stdout","text":["Optimizing NVDA\n","Fitting 3 folds for each of 5 candidates, totalling 15 fits\n","Epoch 1/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m572s\u001b[0m 9s/step - loss: 0.0383 - mae: 0.1305\n","Epoch 2/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m518s\u001b[0m 9s/step - loss: 7.1280e-04 - mae: 0.0193\n","Epoch 3/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m522s\u001b[0m 9s/step - loss: 5.6620e-04 - mae: 0.0160\n","Epoch 4/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m567s\u001b[0m 9s/step - loss: 5.8283e-04 - mae: 0.0175\n","Epoch 5/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m562s\u001b[0m 9s/step - loss: 4.0713e-04 - mae: 0.0139\n","Epoch 6/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m512s\u001b[0m 8s/step - loss: 3.9456e-04 - mae: 0.0133\n","Epoch 7/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m520s\u001b[0m 9s/step - loss: 3.6344e-04 - mae: 0.0133\n","Epoch 8/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m563s\u001b[0m 9s/step - loss: 5.3014e-04 - mae: 0.0164\n","Epoch 9/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m560s\u001b[0m 9s/step - loss: 3.4299e-04 - mae: 0.0124\n","Epoch 10/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m562s\u001b[0m 9s/step - loss: 3.4852e-04 - mae: 0.0127\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m53s\u001b[0m 1s/step\n","Epoch 1/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m588s\u001b[0m 9s/step - loss: 0.0322 - mae: 0.1054\n","Epoch 2/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m561s\u001b[0m 9s/step - loss: 7.1810e-04 - mae: 0.0172\n","Epoch 3/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m562s\u001b[0m 9s/step - loss: 5.5002e-04 - mae: 0.0142\n","Epoch 4/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m523s\u001b[0m 9s/step - loss: 4.5741e-04 - mae: 0.0133\n","Epoch 5/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m561s\u001b[0m 9s/step - loss: 5.4092e-04 - mae: 0.0150\n","Epoch 6/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m527s\u001b[0m 9s/step - loss: 3.9513e-04 - mae: 0.0121\n","Epoch 7/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m567s\u001b[0m 9s/step - loss: 3.6241e-04 - mae: 0.0118\n","Epoch 8/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m556s\u001b[0m 9s/step - loss: 3.1595e-04 - mae: 0.0108\n","Epoch 9/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m563s\u001b[0m 9s/step - loss: 3.2093e-04 - mae: 0.0112\n","Epoch 10/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m524s\u001b[0m 9s/step - loss: 3.0629e-04 - mae: 0.0110\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m50s\u001b[0m 1s/step\n","Epoch 1/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m578s\u001b[0m 9s/step - loss: 0.0021 - mae: 0.0261\n","Epoch 2/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m563s\u001b[0m 9s/step - loss: 5.8733e-05 - mae: 0.0055\n","Epoch 3/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m531s\u001b[0m 9s/step - loss: 3.5173e-05 - mae: 0.0040\n","Epoch 4/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m549s\u001b[0m 9s/step - loss: 2.8266e-05 - mae: 0.0036\n","Epoch 5/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m555s\u001b[0m 8s/step - loss: 3.7575e-05 - mae: 0.0044\n","Epoch 6/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m570s\u001b[0m 8s/step - loss: 3.1503e-05 - mae: 0.0039\n","Epoch 7/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m515s\u001b[0m 8s/step - loss: 3.7467e-05 - mae: 0.0043\n","Epoch 8/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m564s\u001b[0m 8s/step - loss: 3.0132e-05 - mae: 0.0038\n","Epoch 9/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m561s\u001b[0m 8s/step - loss: 3.2813e-05 - mae: 0.0041\n","Epoch 10/10\n","\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m563s\u001b[0m 8s/step - loss: 3.0868e-05 - mae: 0.0040\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m53s\u001b[0m 1s/step\n","Epoch 1/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m391s\u001b[0m 11s/step - loss: 0.0614 - mae: 0.1579\n","Epoch 2/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m383s\u001b[0m 11s/step - loss: 7.7058e-04 - mae: 0.0198\n","Epoch 3/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m388s\u001b[0m 11s/step - loss: 5.0169e-04 - mae: 0.0145\n","Epoch 4/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m371s\u001b[0m 11s/step - loss: 4.6808e-04 - mae: 0.0141\n","Epoch 5/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m385s\u001b[0m 11s/step - loss: 4.5374e-04 - mae: 0.0142\n","Epoch 6/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m379s\u001b[0m 11s/step - loss: 4.2107e-04 - mae: 0.0136\n","Epoch 7/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m338s\u001b[0m 11s/step - loss: 4.9287e-04 - mae: 0.0156\n","Epoch 8/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m335s\u001b[0m 11s/step - loss: 4.2224e-04 - mae: 0.0137\n","Epoch 9/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m334s\u001b[0m 11s/step - loss: 4.4734e-04 - mae: 0.0145\n","Epoch 10/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m379s\u001b[0m 11s/step - loss: 3.7047e-04 - mae: 0.0130\n","\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 2s/step\n","Epoch 1/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m383s\u001b[0m 11s/step - loss: 0.0650 - mae: 0.1683\n","Epoch 2/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m333s\u001b[0m 11s/step - loss: 8.8073e-04 - mae: 0.0212\n","Epoch 3/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m334s\u001b[0m 11s/step - loss: 5.6892e-04 - mae: 0.0160\n","Epoch 4/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m375s\u001b[0m 11s/step - loss: 4.6886e-04 - mae: 0.0143\n","Epoch 5/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m389s\u001b[0m 11s/step - loss: 5.0996e-04 - mae: 0.0145\n","Epoch 6/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m380s\u001b[0m 11s/step - loss: 4.2139e-04 - mae: 0.0128\n","Epoch 7/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m387s\u001b[0m 11s/step - loss: 3.5085e-04 - mae: 0.0117\n","Epoch 8/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m380s\u001b[0m 11s/step - loss: 3.7403e-04 - mae: 0.0119\n","Epoch 9/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m379s\u001b[0m 11s/step - loss: 3.6449e-04 - mae: 0.0114\n","Epoch 10/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m383s\u001b[0m 11s/step - loss: 3.4276e-04 - mae: 0.0111\n","\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 2s/step\n","Epoch 1/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m387s\u001b[0m 11s/step - loss: 0.0045 - mae: 0.0438\n","Epoch 2/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m384s\u001b[0m 11s/step - loss: 9.3899e-05 - mae: 0.0078\n","Epoch 3/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m380s\u001b[0m 11s/step - loss: 3.4327e-05 - mae: 0.0041\n","Epoch 4/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m370s\u001b[0m 12s/step - loss: 3.1559e-05 - mae: 0.0037\n","Epoch 5/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m344s\u001b[0m 11s/step - loss: 2.7787e-05 - mae: 0.0035\n","Epoch 6/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m383s\u001b[0m 11s/step - loss: 3.7412e-05 - mae: 0.0044\n","Epoch 7/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m331s\u001b[0m 11s/step - loss: 4.0711e-05 - mae: 0.0048\n","Epoch 8/10\n","\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m378s\u001b[0m 11s/step - loss: 3.5842e-05 - mae: 0.0044\n","\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 2s/step\n","Epoch 1/10\n"]}],"source":["# === Mount Drive and Load Data ===\n","drive.mount('/content/drive', force_remount=True)\n","data = pd.read_csv('/content/drive/MyDrive/ML/final_project/data/processed/df_merged.csv')\n","\n","data['date'] = pd.to_datetime(data['date'])\n","data.sort_values(['ticker', 'date'], inplace=True)\n","data.reset_index(drop=True, inplace=True)\n","\n","tickers = data['ticker'].unique()\n","\n","# === Parameters ===\n","window_size = 30\n","numeric_features = ['close', 'volume', 'open', 'high', 'low']\n","\n","# === Preprocessing Dictionaries ===\n","tokenizers, max_seq_len, scalers = {}, {}, {}\n","train_sequences, test_sequences, combined_train = {}, {}, {}\n","\n","for ticker in tickers:\n","    df_ticker = data[data['ticker'] == ticker].reset_index(drop=True)\n","    split_idx = int(len(df_ticker) * 0.8)\n","\n","    train_df = df_ticker.iloc[:split_idx]\n","    test_df = df_ticker.iloc[split_idx:]\n","\n","    tokenizer = Tokenizer()\n","    tokenizer.fit_on_texts(train_df['title'].fillna('').astype(str))\n","    tokenizers[ticker] = tokenizer\n","\n","    train_title_seq = tokenizer.texts_to_sequences(train_df['title'].fillna('').astype(str))\n","    test_title_seq = tokenizer.texts_to_sequences(test_df['title'].fillna('').astype(str))\n","    max_len = max(max(len(seq) for seq in train_title_seq), max(len(seq) for seq in test_title_seq))\n","    max_seq_len[ticker] = max_len\n","\n","    X_train_pad = pad_sequences(train_title_seq, maxlen=max_len, padding='post')\n","    X_test_pad = pad_sequences(test_title_seq, maxlen=max_len, padding='post')\n","\n","    scaler = MinMaxScaler()\n","    scaler.fit(train_df[numeric_features])\n","    scalers[ticker] = scaler\n","\n","    train_scaled = scaler.transform(train_df[numeric_features])\n","    test_scaled = scaler.transform(test_df[numeric_features])\n","\n","    def create_sequences(num, text, window):\n","        X_num, X_text, y = [], [], []\n","        for i in range(len(num) - window):\n","            X_num.append(num[i:i+window])\n","            X_text.append(text[i:i+window])\n","            y.append(num[i+window][0])\n","        return np.array(X_num), np.array(X_text), np.array(y)\n","\n","    X_num_train, X_text_train, y_train = create_sequences(train_scaled, X_train_pad, window_size)\n","    train_sequences[ticker] = (X_num_train, X_text_train, y_train)\n","\n","    # Combine inputs into flat arrays\n","    X_combined = np.concatenate([\n","        X_num_train.reshape((X_num_train.shape[0], -1)),\n","        X_text_train.reshape((X_text_train.shape[0], -1))\n","    ], axis=1)\n","    combined_train[ticker] = (X_combined, y_train)\n","\n","# === Define Model Builder (corrected single-input model) ===\n","def build_model(numeric_lstm_units=64, text_lstm_units=32, dense_units=32, embedding_dim=50, learning_rate=0.001, ticker=None):\n","    seq_len = max_seq_len[ticker]\n","    vocab_size = len(tokenizers[ticker].word_index) + 1\n","    n_num_features = len(numeric_features)\n","\n","    total_numeric_size = window_size * n_num_features\n","    total_text_size = window_size * seq_len\n","\n","    combined_input = Input(shape=(total_numeric_size + total_text_size,), name='combined_input')\n","\n","    numeric_input = Lambda(lambda x: tf.reshape(x[:, :total_numeric_size], (-1, window_size, n_num_features)))(combined_input)\n","    text_input = Lambda(lambda x: tf.reshape(x[:, total_numeric_size:], (-1, window_size, seq_len)))(combined_input)\n","\n","    numeric_out = LSTM(numeric_lstm_units)(numeric_input)\n","\n","    text_out = TimeDistributed(Embedding(vocab_size, embedding_dim))(text_input)\n","    text_out = TimeDistributed(LSTM(text_lstm_units))(text_out)\n","    text_out = LSTM(text_lstm_units)(text_out)\n","\n","    combined = concatenate([numeric_out, text_out])\n","    combined = Dense(dense_units, activation='relu')(combined)\n","    output = Dense(1)(combined)\n","\n","    model = Model(inputs=combined_input, outputs=output)\n","    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate), loss='mse', metrics=['mae'])\n","    return model\n","\n","# === Hyperparameter Optimization with Early Stopping ===\n","save_dir = \"/content/drive/MyDrive/ML/final_project/data/results/models_optimized\"\n","os.makedirs(save_dir, exist_ok=True)\n","\n","early_stopping = EarlyStopping(monitor='loss', patience=3)\n","\n","param_dist = {\n","    'numeric_lstm_units': [32, 64, 128],\n","    'text_lstm_units': [16, 32, 64],\n","    'dense_units': [16, 32, 64],\n","    'embedding_dim': [50, 100],\n","    'learning_rate': [1e-2, 1e-3, 1e-4],\n","    'batch_size': [32, 64],\n","    'epochs': [10],\n","    'callbacks': [early_stopping]\n","}\n","\n","optimized_models = {}\n","for ticker in tickers:\n","    print(f\"Optimizing {ticker}\")\n","    X_combined, y_train = combined_train[ticker]\n","\n","    keras_reg = KerasRegressor(\n","        model=build_model,\n","        numeric_lstm_units=64,\n","        text_lstm_units=32,\n","        dense_units=32,\n","        embedding_dim=50,\n","        learning_rate=0.001,\n","        ticker=ticker,\n","        verbose=1\n","    )\n","\n","    random_search = RandomizedSearchCV(keras_reg, param_dist, n_iter=5, cv=3, scoring='neg_mean_squared_error', verbose=1)\n","    random_search.fit(X_combined, y_train)\n","\n","    best_model = random_search.best_estimator_.model_\n","    optimized_models[ticker] = best_model\n","\n","    best_model.save(os.path.join(save_dir, f\"{ticker}_optimized.keras\"))\n","    print(f\"Saved {ticker} model\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1744756122173,"user":{"displayName":"JakeTheDrake","userId":"01107552549446951353"},"user_tz":240},"id":"DYE-ywBrkPM8","outputId":"bb4c81eb-f26d-4327-82cd-05e19a2f3fbf"},"outputs":[{"name":"stdout","output_type":"stream","text":["scikit-learn: 1.6.1\n","scikeras: 0.13.0\n"]}],"source":["import sklearn\n","import scikeras\n","\n","print(\"scikit-learn:\", sklearn.__version__)\n","print(\"scikeras:\", scikeras.__version__)"]}],"metadata":{"colab":{"provenance":[{"file_id":"14o9ZfN_KwGFkpKiaUJOuEvvj0wDwyfZ8","timestamp":1744662487451}],"authorship_tag":"ABX9TyPTg/bNrB//nv/aB9ovyvhd"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}